# lf (list files)
# https://medium.com/@a.hr.mostafavi/using-lf-file-manager-on-windows-fc4f1e4e1442
# https://github.com/ahrm/dotfiles/blob/main/lf-windows/lfrc

# https://pkg.go.dev/github.com/gokcehan/lf
# https://github.dev/gokcehan/lf
# https://github.com/gokcehan/lf

# reload config file using f5
# :source M:/Script/Pwsh/Cmdlet/lf/config/lfrc
# 'push' is emulating keyboard typing in cmd line
map <f-5> push :source<space>M:/Script/Pwsh/Cmdlet/lf/config/lfrc<enter>

# edit this file
map <f-4> &code M:/Script/Pwsh/Cmdlet/lf/config/lfrc

###
### configuration
###

# custom file preview
# unset COLORTERM
set previewer "M:/Script/Pwsh/Cmdlet/lf/config/scripts/previewer.cmd"

# set period 1
# interpreter for shell commands, on windows by default it is cmd
# if use pwsh, it is slow, and has redraw problem
# set shell pwsh -nologo -noninteractive -noprofile

# show icon beside the file name
set icons
# set drawbox
# set filesep ";" #default is '/n'
# leave some space(offset) at the top and the bottom of the screen
set scrolloff 4
# []string: info of file or directory: size, time(modification time), ctime(creation time), atime(last access time)
# the size of dir is not right.
set info size:time
# jump to the first match after each keystroke during searching.
# after press 'enter', then 'n': next;'N':previous
set incsearch
set incfilter
# not work, test future version
# enable *?[][^] in search(/) and back-search(?)
# set globsearch
# show hidden files
set hidden

 #  (default "\n") https://github.com/gokcehan/lf/blob/ad6fa3fa736104ad3061797c6c74cf2e57ebe27d/doc.txt#L146
set filesep ","

##################################################################
### commands
##################################################################
# change 'doc' command to use a different pager
cmd doc $lf -doc | less

# https://github.com/gokcehan/lf/blob/master/doc.md#on-quit
# note: the `:\=\\` is to replace '\' in %fx% into '\\'
#cmd on-quit $echo %fx:% > %TEMP%\lf-lastSelection.json
# can not handle multiple files returned from multi selection(the new line is the separator), we can make the seperator to be ';' by `set filesep ";"`, but not flexible enough, so we determined to use pwsh.
cmd on-quit $echo {"lastSelections":[%fx:\=\\%],"workingDir":%PWD:\=\\%} > %TEMP%\lf-onQuit.json
# slow
# cmd on-quit $pwsh -nologo -noninteractive -noprofile -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/on-quit.ps1
# cmd on-quit &{{cd %fx%;echo 'dddd'}}

# comment out because it easily triggered by the input-cancel when when in command mode
# map <esc> quit # the same as q

##################################################################
###	cmd map
##################################################################

###
### navigation:
###

## main panel navigation #########

# <up> or <k>: focus to above item
# <down> or <j>: focus to below item
# <left> or <h>: goto parent folder
# <right> or <l>: `open` the item

# <home> or <gg>: focus item at begin
# end> or <G>: focus item at end

## move focus within screen view
# <H>: focus the item at high top of screen.High
# <M>: focus the item in middle of the screen.Low
# <L>: focus the item in the low bottom of the screen.Middle


# pageUp: one page up
# pageDown: one page down
# <c-u> half-up # default
map <c-n> half-down

## scroll, we can also use mouse wheel
map <c-e> scroll-up
map <c-d> scroll-down

## jump ###############

# :cd : change working directory, i.e. `:cd 'c:\temp'`. note: the path need to be a single quoted string
# gh: go to home directory
# ]: jump-next of the folder changing history
# [: jump-prev of the folder changing history

## jump with marks(quickly navigate between dirs)
# m  : save a key as a mark for the current dir. `ma`
# '  : change dir to the key mark. 'a
# "  : remove the mark "a


## find/search/filter

# f: find char in file names, ;: next; ,: previous
# F: find back
# /: searching; n:next; N: previous i.e. `/tex<enter>` find 'tex' in file names
# ?: search back

# fuzzy search in folder/subfolder and then navigate to it
cmd file-search push $python<space>M:/Script/Pwsh/Cmdlet/lf/config/scripts/fzfpy.py<space>%id%<enter>
map <c-f> :file-search

## filter out irrelevant files/folders and only show the relevant files/folders
## filter is remembered for the folder, and showed at right bottom corner
## run again will show last filer, and we can do adjustment
map <c-s> push :filter<enter>
# map F push :filter<enter>
## clear filter
map <c-z> push :setfilter<enter>
# map gF push :setfilter<enter>

###
### file management
###

## rename #######

# todo: need to auto redraw
cmd rename %sh -c 'mv -i %f% $0'
# cmd rename %mv -i $f $1
map r

# faster
map rr push :rename<space>
# map r push :rename<space> %f% # %f% in the command line not expanded, so have to use a script
# https://github.com/gokcehan/lf/issues/329
cmd rename-with-name $pwsh -nologo -noninteractive -noprofile -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/rename.ps1

# a little slower
map rn rename-with-name
map <f-2> rename-with-name

## new file/folder #######

# create files and directories
# note $env:0 not work
# cmd createfile ${{
#   $file = Read-host 'New File Name'
#   new-item -path $file
# }}
# # cmd createfile !new-item
# cmd createdir ${{
#   $dir = Read-host 'New Directory Name'
#   new-item $dir -Type Directory; #redraw
# }}
# map a push :createfile<enter>;redraw
# map A push :createdir<enter>
cmd createfile %sh -c 'touch $0'
cmd createdir %sh -c 'mkdir $0'

# add file/directory
map af push :createfile<space>
map ad push :createdir<space>

## selection ##########

# map u
# unselect all
map su unselect
# map i
# invert selection
map si invert
map sgg push :glob-select<space>
map sgu push :glob-unselect<space>
# <space> toggle selection

## copy ################

# note: by default, c is mapped to clear the copy&cut files saved in $home\AppData\Local\lf\files
# unmap y, it's yank by default
map y
map yy copy %fx%
map <c-c> copy %fx%
# map Y %$env:fx | scb

# below code can only copy one file, maybe cause by the '`n' seperator
# cmd copy-current-path %echo %fx% | clip
# map yp copy-current-path

# $env:fx : files/folders selected or file/folder at cursor if no selection
# the returned strings is separated by '\n'
cmd copy-paths &pwsh -nologo -noninteractive -noprofile -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/copy-paths.ps1
map yp copy-paths

# copy work directory
cmd copy-dir-path %echo %PWD%| clip
map yd copy-dir-path

# copy file names
cmd copy-names &pwsh -nologo -noninteractive -noprofile -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/copy-names.ps1
map yn copy-names

## cut ################

# cut default is 'd'
# can do multi-select before cut
map <c-x> cut

# c: Clear file paths in copy/cut buffer: $home\AppData\Local\lf\files, remove the visual block on UI
## paste #################
# default is p
# note: <c-v> is not working in terminal
# In terminal applications, Ctrl+V is often interpreted as the ASCII control character 'SYN' (synchronous idle) or '^V'.
# Most terminals use Shift+Insert or right-click for pasting. Some terminal emulators allow you to configure Ctrl+Shift+V for pasting.

map V paste

## delete #################

# permanent deletion
map D delete

## trash
# cmd trash &Remove-ItemSafely env:fx env:1
cmd trash-selected &pwsh -nologo  -noprofile -noninteractive -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/trash.ps1
map <delete> trash-selected
map d # remove d map, by default its the 'cut' cmd
map dd trash-selected

### undo trash
cmd trash-undo &pwsh -nologo -noninteractive -noprofile -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/trashUndo.ps1
map du trash-undo
# map T push &wt<enter>

## open ##################

# define a custom 'open' command
# This command is called when current file is not a directory.
# change the default open command to work in powerShell
# cmd open &start $Env:f

# note: the right arrow triggers default open

## editor and open

### open file in code
cmd vsCode &code %f%
# default is e is edit with notepad on windows
map e vsCode
map oc vsCode

cmd Notepad &Notepad %f%
map on Notepad

# open explorer in current directory
# cmd file-Explorer push &start.<enter>
# https://ss64.com/nt/explorer.html
# If /e or /n are followed by a comma and folder path then explorer will open and display the folder
# /select,object Open a window view with the specified folder, file or application selected.
cmd fileExplorer &explorer /n, /select, %fx%
map oe fileExplorer
# map S push &start.<enter>

cmd open-With... &pwsh -nologo -noninteractive -noprofile -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/openWith.ps1
map ow open-With...

# vim is there when we installed git
cmd Vim $vim %f%
map ov Vim

# map op !pwsh -nologo -noprofile -file M:/Script/Pwsh/Cmdlet/lf/config/scripts/properity.ps1
map op &GDProps.exe %fx%

# less is there when we installed git
# map i $less $Env:f

## archive management #############

# here we use sh to parse in the argument $0
cmd zip-to %sh -c '7z a $0 %fx%'
cmd extract-to %sh -c '7z  x %f% -o$0'
cmd extract-here %7z x %f%
cmd extract_auto %7z x %f% -o%f%
cmd extract_and_remove %sh -c '7z x %f% -o%f%_ && rm %f%'

cmd zip-to-file push :zip-to<space>
map zz zip-to-file
# map zut push :extract-to<space>
cmd extract-to-folder push :extract-to<space>
map zut extract-to-folder
cmd extract-to-here push :extract-here<enter>
map zuh extract-to-here
map zur push :extract_and_remove<enter>


## drag and drop ##################

cmd drag push &python<space>M:/Script/Pwsh/Cmdlet/lf/config/scripts/drag.py<space>multi<space>%fx%<enter>
cmd dragonce push &python<space>M:/Script/Pwsh/Cmdlet/lf/config/scripts/drag.py<space>once<space>%fx%<enter>
# cmd dragonce &explorer M:/Script/Pwsh/Cmdlet/lf/config/scripts/drag.bat
map <c-t> push :dragonce<enter> # c-d is used for scroll down

###
### Display
###

# c-l : redraw (refresh)
# c-r : flush cache and reload modified files and directories, script updated.

# ctime: changing time: content and metadata: ownership, permissions
# mtime: modification time. content
# atime: access time. the file is read: opened, viewed, or executed

# sa: sort by access time
# st: sort by modification time
# sc: sort by changing time

# za: show all info: size and time
# zt: show time info
# zs: show size info
# zn: no info
# zh: toggle hidden
# zr: reverse current sorting

###
### preview
###

# v: default is invert select
# note: press v again to hide the preview window
map v &C:\app\QuickLook\QuickLook.exe %f%

# # must have at least a file in it
# cmd bookmark %sh -c 'python D:/lf_scripts/bookmark.py %f% $0'
# cmd goto_bookmark push $python<space>D:/lf_scripts/goto_bookmark.py<space>%id%<enter>
# map B push :bookmark<space>
# map b push :goto_bookmark<enter>


# # cmd send_to_mobile %sh -c 'scp -P 2222 hex@192.168.1.151: %fx%'
# cmd send_to_mobile push $scp<space>-P<space>2222<space>%fx%<space>hex@192.168.1.151:<enter>
# cmd send_to_tablet push $scp<space>-P<space>2222<space>%fx%<space>hex@192.168.1.150:<enter>
# map st push :send_to_tablet<enter>
# map sm push :send_to_mobile<enter>

# Shell commands with multiline definitions and/or positional arguments and/or
# quotes do not work in Windows. For anything but the simplest shell commands,
# it is recommended to create separate script files and simply call them here
# in commands or mappings.
#
# Also, the default keybindings are defined using cmd syntax (i.e. '%EDITOR%')
# which does not work with powershell. Therefore, you need to override these
# keybindings with explicit choices accordingly.


# change the pager used in default pager keybinding
# The standard pager used in Windows is 'more' which is not a very capable
# pager. You may instead install a pager of your choice and replace the default
# pager keybinding accordingly.
# use bat as a pager
# ! to wait after the command executed, and press any key to return to lf
# by defaut it's `map i !%PAGER% %f%`
map i !bat %f%

# change the shell used in default shell keybinding
# default: map w $%SHELL%
# type exit<enter> to return to lf
# used to switch shell to do something then switch back with `exit`
# NOTE: all the env are accessible in this shell, inherited from parent process `lf`
# -noprofile
# note: can not trigger with ctrl-s or o
map w $pwsh -nologo

## execute current file (must be executable)
# # execute with shell
# map x $$f
# # execute with shell_wait
# map X !$f


##################################################################
### command line map (cmap)
##################################################################

# c-p
cmap <up> cmd-history-prev
# a-f
cmap <down> cmd-history-next
# a-backspace
# below not work
# cmap <c-backspace> cmd-delete-word-back

# a-d
# below not work
# camp <a-delete> cmd-delete-word
# camp <c-delete> cmd-delete-word

# enable use right arrow key to move cursor, otherwise it will open the file highlighted
cmap <right> cmd-right

# during search to open
# use 'cmd-escape' to cancel the search
cmap <a-right> :cmd-enter; open

# navigate cursor between words on command line
# <c-f>
cmap <c-right> cmd-word
# <c-b>
cmap <c-left> cmd-word-back


