# https://medium.com/@a.hr.mostafavi/using-lf-file-manager-on-windows-fc4f1e4e1442
# https://github.com/ahrm/dotfiles/blob/main/lf-windows/lfrc
set icons
set colors
# interpreter for shell commands
# set shell pwsh

# define a custom 'open' command
# This command is called when current file is not a directory.

# Shell commands with multiline definitions and/or positional arguments and/or
# quotes do not work in Windows. For anything but the simplest shell commands,
# it is recommended to create separate script files and simply call them here
# in commands or mappings.
#
# Also, the default keybindings are defined using cmd syntax (i.e. '%EDITOR%')
# which does not work with powershell. Therefore, you need to override these
# keybindings with explicit choices accordingly.

# change the default open command to work in powerShell
# cmd open &start $Env:f

# change the editor used in default editor keybinding
# There is no builtin terminal editor installed in Windows. The default editor
# mapping uses 'notepad' which launches in a separate GUI window. You may
# instead install a terminal editor of your choice and replace the default
# editor keybinding accordingly.

# vim is there when we installed git
map e $vim $Env:f

# change the pager used in default pager keybinding
# The standard pager used in Windows is 'more' which is not a very capable
# pager. You may instead install a pager of your choice and replace the default
# pager keybinding accordingly.

# less is there when we installed git
map i $less $Env:f

# change the shell used in default shell keybinding
map w $pwsh

# change 'doc' command to use a different pager
cmd doc $a lf -doc | less

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell
# reload config file using f5
map <f-5> push :source<space>M:/Script/Pwsh/Cmdlet/lf/config/lfrc<enter>
## execute current file (must be executable)
# execute with shell
map x $$f
# execute with shell_wait
map X !$f
# map P &a quicklook -- $env:f
## delete
# note: $f is current selected file, $fs is selected files, $fx is $fs if select many else it is $f
# todo:trash not work
cmd trash &Remove-ItemSafely env:fx env:1
map <delete> delete

set filesep " "
# use a and A to create files and directories
cmd createfile !{{
  new-item -path $0
  write-host 'test'
  write-host 'bbb'
}}
cmd createdir %new-item -Type Directory $1; redraw
map a push :createfile<space>
map A push :createdir<space>
map Y %$env:fx | scb